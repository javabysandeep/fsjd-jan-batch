RAM is used to execute/run the applications
RAM is temporary storage. We store program instructions to be given to the machine
To store some temporary data/ program data
Domain Name Server [DNS] --> domain --> IP address --> Google Server
Name[Variable] --- > Memory address ----> RAM:

value 100  to be stored in the RAM.

Decimal - binary --> Memory Address --> RAM

# Variable : It is name given to a memory location address.
# use of variable : it is used to store data or access the data which is already stored.

int mobileNumber = 123456;

- 123456 is the value or data
- mobileNumber is the variable
- int : it is data type

                    123456
mobileNumber ---> memory address - > 

# types of data : number , character, boolean
number :  
    - decimal or floating : 10.5
    - whole number : 10, 11 -, 0, -12
character : A, &, H, s
boolean : true, false


decimal number 10 ---> binary 1010 -- > it will be stored in the memory.
character ---> ASCII/UNICODE number --> binary
A ---> 65 --> binary
true --> 1 -->
false --> 0 --> 


# data types in java
    - specifier what type of data we are putting in the variable
    - it also specifies the memory requirement to put the value
    - it specifies range of allowed values.
    - differnetn datatypes available : byte, short, int, long, float, double, char, boolean

8 bit --> 1 byte
16 bits - > 2 bytes

    123 = 100 + 20 + 3 = 10 * 10 + 2 * 10 + 3 * 10^0
                        = 1 * 10 ^2 + 2 * 10^1 + 3 * 10^0

    0 1 1 1 1 1 1 1 ---> 1 * 2^6 + 1*2^5 + 1*2^4 + 1 * 2^3 + 1*2^2 + 1*2^1 +  1*2^0
                        = 64 + 32 + 16 + 8 + 4 + 2 +1
                        = 127

    MSB : Most significant bit: to represent sign the number
    positive : 0
    negaitve : 1

    Whole  number:
    byte : 1 bytes = 127
    short : 2 bytes = 32767
    int :   4 bytes = 24147
    long : 8 bytes = 

    floating number
    float : 4 bytes
    double : 8 bytes


    int a  = 8; // 4 bytes

    short b = 100; // 2 bytes : 32767

    long 



    byte, short, int, long, float, double, char

    Arithmetic operators : +, -, *, /, %

    operand1 operator operand2      =  result

    byte,short, int, char (+,-, *,/, %) byte,short, int, char => int
    byte, short, int, char, long (+,-, *,/, %) byte,short, int, char, long => long
    byte,short, int, char, long,float (+,-, *,/, %) byte,short, int, char, long,float => float
    byte,short,int,char,long,float, double (+,-, *,/, %) byte,short, int, char, long,float,doble => double


    int
    long
    float
    double

# arithmetic operators are not allowed for boolean type
# If we divide or take modulo of byte, short, int long, char by zero we get ArithmeticException divide by zero.
# if we divide float or double by zero we get Infinity as a output
# if we modulo a float or double by zero we get NaN[Not A Number] as a output
#Expression evaluation :
    - Expression evaluation will be from left to right
    - It will follow standard BODMAS [ Brackets of Division Multiplication Add, Sub]

# String concatenation operator +
 + operator will perform mathematical addition when both the operands are of type number
 + operator will perform string concatenation  when one the operands are of type String

 # Assignment Operator =




 # Control statements:
    - theses helps us in control the flow of execution of the program
  1. conditional statements : it will help us to either skip the execution of execute the lines
    1. if- else
        - syntax : if (condition) {
                    //statements
                 } else {
                    //statements
                 }
        - if else both are keywords
        - condition must be of type boolean
             - direct value either true or false
             - expression which results into boolean value e.g. 5 > 4---> true
             - variable of type boolean
             - function call which returns boolean value

        - if condition is true then only of block will be executed
        - else block will be executed when condition is false
        - either if or else will be executed not both of them
        - there should not be any independent statements in between if and else
     - when to avoid if-else?
        - if the number of comparisons are more than 3

    2. switch

  2. looping statements: it will repeat the execution of selected
    1. for loop: no. of iterations are known in advance
    2. while loop: no. of iterations are not known in advance
    3. do while: no. of iterations are not known in advance but code is expected to execute at least once

  3. transfer statements : it will transfer the control from one locatin to another location inside the program
    1. break
    2. continue
    3. return

 // transfer statements or jump statements: break, continue, return[keywords]
        // control will be transferred from one location to another

        // break :
            //  it is keyword
            // it must be used only in switch and loops otherwise we get CTE
            // with the help of break, control will be transferred out  of the switch or loop



        // continue :
            // it is a keyword
            //  it must be used only in the loops otherwise we get CTE
            // with the help of continue, control will be transferred out  of the loop

        //return :
            // it is a keyword
            // it must be used inside the method but must be the last statement in the method
            // with the help of return, control will be transferred out of the method



# JVM architecture

JDL, JRE, JVM
1. Write  java program
2. Compile java program
3. Byte code [.class]
4. Class loader will load the class in the memory
5. ByteCode verifier to verify the byte code
6. Memory components
    - heap
    - java stack memory
    - Class or Method memory area
    - Native method area
    - Native method stack area
    - PC register
 - Native method Interface
 - Native method Library
 - Java execution engine
 - Intpreter
 - JIT
















